解决高并发：
1，设计不可变对象 在多个线程之前就是线程安全的 （躲避开了并发的问题）
2，线程封闭。 (把对象封装到一个线程里， 只有这一个线程中可以看到)

线程封闭：
1，Ad-hoc: 最糟糕
2，堆栈封闭：局部变量，无并发问题
           (多个线程访问一个方法的时候，方法中的局部变量拷贝一份到线程栈中，java内存模型)
           所以能用局部变量的时候，就不要使用全局变量。
           ThreadLocal线程封闭：特别好的封闭方法
           (大致内部维护了一个map,key为线程的名称，value为线程使用的变量)

----------------------------------------------
ThreadLocal + Filter 的模式  搞定用户传递 整个流程共享 随时随地使用

ThreadLocal:是线程安全的 可以存储用户信息
Filter请求入口就可以做拦截 获取用户请求携带的信息 写进ThreadLocal中
为了及时清空一个请求结束之后的请求信息 可以搞一个Interceptor 请求结束之前清空该ThreadLocal里面存储的内容。
