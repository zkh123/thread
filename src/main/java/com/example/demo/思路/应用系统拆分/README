将一个应用拆分成多个应用

拆分准则：
1, 功能模块
   订单系统，产品系统等等

   行情中心: 定时任务 流程处理
   交易中心: 股票买入卖出
   账户中心: 流程处理 定时任务
   用户中心: 基数数据
   通知中心: 邮件 短信 推送
   系统之间 使用dubbo进行通信的。
   跑定时任务的系统 一般是单独的服务来处理 一般要求会更大一些。

   拆分之后的弊端：
   管理复杂性提高，服务器成本上提高，应用多了网络开销就大了，

   如何下手 拆分的原则：
   a) 业务优先  业务边界
   b) 循序渐进  拆分和测试 边拆分边测试
   c) 兼顾基数  重构，分层
   d) 可靠测试

   思考
   a) 应用之间通信： RPC(dubbo等)
      消息队列(数据包小,数据量大,实时性不强的场景)
   b) 应用之间数据库设计： 每个应用都有独立的数据库，几个应用的共同数据 搞一个common库
   c) 避免事务操作跨应用

   技术：微服务框架
   a) dubbo
      分布式服务框架 软负载的功能 监控中心Monitor 和 Registry注册中心 可选单独配置
      Consumer服务消费者 一个consumer相同两次调用 对应的provider是不一定的。provider的位置是不确定的
      Provider服务提供者 provider一般是注册到zookeeper上
      Container服务容器
   b) springcloud
      把功能分散到不同的服务上 实现解耦和灵活
      云架构和平台式部署管理
      1，客户端如何访问这些独立的服务？
         api GateWay: 提供统一的服务入口，安全过滤 流控 服务器对前端实现透明
      2，服务之间如何通信
         异步：消息队列  减小耦合 缓冲  一致性的减弱 接受最终一致性 后台实现幂等性(消息的重复消费)。
                        引入一个独立的broker. (broker的分布式管理)
         同步：rest或者rpc  相对简单 一致性强，容易出现一些调用问题
      3, 服务管理
         通过zookeeper等 做服务注册发现来实现的
         上线-->注册 保持长连接 心跳 实时更新链接信息
         通过zookeeper寻址地址，根据可定制的算法找到一个服务 还可以将服务的信息缓存到本地来提高性能
         下线-->zookeeper会通知给服务的客户端
       4, 服务挂了该如何解决？ (分布式 网络是不可靠的)
          服务调用链
          手段：重试机制，应用的限流, 熔断机制, 负载均衡, 系统降级等等。
